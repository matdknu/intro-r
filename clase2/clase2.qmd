---
title: "CLASE 2 - Introducción a Tidyverse "
subtitle: "Curso de Introducción a R - Observatorio de Legimación de la Violencia (OLES)"
format: html
execute:
  echo: true
  warning: false
  message: false
editor: visual
author:
  - name: Matías Deneken
    email: m.deneken@uc.cl
    affiliations:
      - name: CIIR & OLES
---

## Introducción

El Observatorio de Violencia y Legitimidad Social [(OLES)](https://oles2.netlify.app) es una plataforma que desarrolla investigación colaborativa en temáticas relacionadas con la violencia, explorando sus sentidos, formas de justificación, así como las diversas formas en que la sociedad chilena ha desarrollado procesos de construcción de legitimidad social frente a las autoridades, considerando el rol de la justicia como elemento clave en la comprensión de las transformaciones sociales que vive actualmente el país.

Este curso de R buscará introducir a los y las participantes en las nociones básicas del software en su interfaz de R Studio. Para su instalación pueden ver el siguiente vídeo pinchando [\[Aquí\]](https://www.youtube.com/watch?v=RtkCAKXsVbw&t=204s).

| Clases                                                          |
|-----------------------------------------------------------------|
| Introducción a R                                                |
| **Procesamiento de Datos Cuantitativos con Tidyverse**          |
| Estadísticas descriptiva y Visualización de datos con Tidyverse |
| Introducción al análisis cuantitativo del texto                 |

: Planificación de las sesiones

# ¿Qué es Tidyverse?

El proceso de análisis de datos siempre conlleva procedimientos de limpieza de los valores que implican realizar eliminación o generación de nuevos datos. Este proceso es relevante ya que sin datos eficientes y veraces todos los procesos posteriores serán erróneos o poco eficaces.

Además, R trabaja en forma preferente con datos tabulados (en forma de tablas) y su formato preferido es el dataframe. Los datos tabulados establecen:

-   Cada variable esta almacenada en su propia columna.

-   Cada observación esta almacenada en su propia fila.

-   Cada tabla corresponde a un tipo de observación.

![Herramientas y lógica de tidyverse](images/tidyverse.png){fig-alt="Herramientas y lógica de tidyverse" fig-align="center" width="363"}

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(readr) # Importanción de datos
library(dplyr) # Funciones de procesamiento
library(ggplot2) # Visualización de datos
library(readxl) #Datos de excel
library(httr)
```

## La pipa de Tidyverse `%>%`

La pipa (`%>%`) en `tidyverse` es un operador que facilita la escritura y lectura de código al permitir encadenar una secuencia de operaciones. La pipa toma la salida de una función y la pasa como entrada a la siguiente función, lo que hace que el código sea más limpio y más fácil de entender.

Una forma fácil de realizar es con `ctrl/command` + `shift` + `m`.

![](images/mipa-magrit.jpeg){fig-align="left" width="197"}

![](images/pipa-tidyvers.webp){fig-align="right" width="200"}

## Funciones básicas

### Primer paso: Importación de base de datos

Importaremos una base de datos de acuerdo al paquete readxl, puesto que el paquete readr no agota toda la importación de los datos.

```{r}
#| eval: false
eventos <- read_excel("bbdd/eventos_22_24.xlsx")
```

Otra forma de importar los datos es directamente desde github.

```{r}
#| message: false
#| warning: false
url <- "https://github.com/matdknu/intro-r/raw/main/bbdd/eventos_22_24.xlsx"

# Crear un archivo temporal
temp_file <- tempfile(fileext = ".xlsx")

# Descargar el archivo desde GitHub
GET(url, write_disk(temp_file, overwrite = TRUE))

# Leer el archivo Excel en R
eventos <- read_excel(temp_file)
```

![](images/captura-link.png){fig-align="center"}

### Procesamiento de base de datos

Explorando la base de datos.

```{r}
glimpse(eventos) # Verificar la base de datos
```

Se aprecia que la base de datos tienen nombres que complejizan su manipulación. Un correcto nombre de variables debe ser

-   Minúsculas

-   Sin espacios

-   Sin números.

El R base nos ofrece algunas herramientos para su correcto renombramiento.

```{r}
#| eval: false
colnames(eventos)[1] <- "motivo"
colnames(eventos)[2] <- "tipo"
colnames(eventos)[3] <- "region"
colnames(eventos)[4] <- "n_asistentes"
colnames(eventos)[5] <- "fecha_inicio"
colnames(eventos)[6] <- "hora_inicio"
colnames(eventos)[7] <- "fecha_termino"
colnames(eventos)[8] <- "hora_termino"
```

Tidyverse lo ofrece de la siguiente forma (Ojo, si ya corrieron el código de arriba les saldrá ERROR).

```{r}
eventos <- eventos %>%
  rename(
    motivo = "MOTIVO",
    tipo = "TIPO",
    region = "REGION",
    n_asistentes = "CANTIDAD ASISTENTES",
    fecha_inicio = "FECHA INICIO",
    hora_inicio = "HORA INICIO",
    fecha_termino = "FECHA TERMINO",
    hora_termino = "HORA TERMINO"
  )
```

Seleccionamos las variables de interés con el comando select.

```{r}
eventos %>% select(motivo, region) # Variable(s) de interés.
```

Filtramos con filter:

-   Cuando los casos de las variables son de tipo texto, deben ir en comillas. Por ejemplo `"Paro Nacional"`

-   Cuando los casos de la variable son de tipo número, van sin comillas. Por ejemplo: `2000.`

Primero, queremos solo los eventos con motivo laboral.

Segundo, queremos los eventos con motivo laboral que ocurrieron en la región de valparaíso.

```{r}
eventos %>% filter(motivo == "Laboral")
eventos %>% filter(motivo == "Laboral", region == "V REGION VALPARAISO") #Filtramos
```

Apliquemos ¿Cuál creen que es correcto para el uso de datos?

```{r}
#| eval: false
eventos <- eventos %>% filter(motivo == "Laboral", region == "V REGION VALPARAISO") #Filtramos
eventos_valparaiso <- eventos %>% filter(motivo == "Laboral", region == "V REGION VALPARAISO") #Filtramos

```

Hagamos un filtro numérico con operadores lógicos.

```{r}
eventos100 <-eventos %>% filter(n_asistentes == 100) 
head(eventos100)
```

Combinemos algunas funciones

```{r}
eventos100 <-eventos %>% filter(n_asistentes == 100)%>% select(tipo, region, fecha_inicio)
head(eventos100)
```

Crear nuevas variables desde cero o a partir de las ya existentes.

```{r}
eventos %>% mutate(anio_actual = 2024) %>% select(tipo, region, fecha_inicio, anio_actual)
```

```{r}
eventos %>% mutate(manifestantes_cien = n_asistentes * 100) %>% select(manifestantes_cien, n_asistentes)
```

Crear una nueva variable con `case_when` .

```{r}
eventos <- eventos %>%
  mutate(cat_asistentes = case_when(
    n_asistentes < 250 ~ "Pequeña",
    n_asistentes >= 250 & n_asistentes <= 1000 ~ "Mediana",
    n_asistentes > 1000 ~ "Masiva"
  ))

eventos %>% select(cat_asistentes, n_asistentes)

```

Usemos la función count para contar cuantas de ellas existen:

```{r}
eventos %>% count(cat_asistentes)
```

### Función: `Group_by`

Una función que requiere un mayor nivel de abstracción es `group_by` .

La función `group_by()` en `dplyr`, que es parte del `tidyverse`, se utiliza para agrupar filas de un dataframe según una o más variables. Esta agrupación permite realizar operaciones agregadas en subconjuntos de datos, lo que es útil para resumir información, calcular estadísticas agrupadas y realizar transformaciones específicas por grupo.

Por ejemplo:

```{r}
protestas_region <- eventos %>% select(motivo, region) %>% 
  group_by(region) %>% 
  count(motivo)

head(protestas_region)
```

```{r}
protestas_region_filtrada <- eventos %>% select(motivo, region) %>% 
  group_by(region) %>% 
  count(motivo) %>% 
  filter(n > 20) #Mayores que 20

head(protestas_region_filtrada)
```

```{r}
masividad_protestas_region <- eventos %>% select(cat_asistentes, region) %>% 
  group_by(region) %>% 
  count(cat_asistentes) 
```

# Pequeñas tarea con comentarios sustantivos

1.  Calcula la cantidad de eventos con motivo étnico agrupando por la región de la araucanía y metropolitana.

    **Los resultados deben verse así.**

```{r}
#| echo: false
eventos %>% filter(region == "IX REGION ARAUCANIA" | region == "REGION METROPOLITANA") %>% filter(motivo == "Étnico") %>% group_by(region) %>%  count(motivo)
```

2.  Selecciona todas las manifestaciones (motivo) que fueron\
    Género (Feminista), en calida de Marcha sin autorización y que tuvieron igual o maás de 500 manifestantes.

Al imprimir la base de datos, que se vea la región y fecha de inicio.

**Los resultados deben verse así:**

```{r}
#| echo: false

eventos %>% filter(motivo == "Género (Feminista)") %>% filter(tipo == "Marcha sin autorización") %>% filter(n_asistentes >= 500) %>% 
  select(region, fecha_inicio)

```
