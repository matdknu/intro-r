---
title: "CLASE 3 - Estadística y Visualización "
subtitle: "Curso de Introducción a R - Observatorio de Legimación de la Violencia (OLES)"
format: html
editor: visual
author:
  - name: Matías Deneken
    email: m.deneken@uc.cl
    affiliations:
      - name: CIIR & OLES
---

# Introducción

El Observatorio de Violencia y Legitimidad Social [(OLES)](https://oles2.netlify.app) es una plataforma que desarrolla investigación colaborativa en temáticas relacionadas con la violencia, explorando sus sentidos, formas de justificación, así como las diversas formas en que la sociedad chilena ha desarrollado procesos de construcción de legitimidad social frente a las autoridades, considerando el rol de la justicia como elemento clave en la comprensión de las transformaciones sociales que vive actualmente el país.

Este curso de R buscará introducir a los y las participantes en las nociones básicas del software en su interfaz de R Studio. Para su instalación pueden ver el siguiente vídeo pinchando [\[Aquí\]](https://www.youtube.com/watch?v=RtkCAKXsVbw&t=204s).

| Clases                                                              |
|---------------------------------------------------------------------|
| Introducción a R                                                    |
| Procesamiento de Datos Cuantitativos con Tidyverse                  |
| **Estadísticas descriptiva y Visualización de datos con Tidyverse** |
| Introducción al análisis cuantitativo del texto                     |

: Planificación de las sesiones

# Base de datos y librerías.

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(readr) # Importanción de datos
library(dplyr) # Funciones de procesamiento
library(ggplot2) # Visualización de datos
library(readxl) #Datos de excel
library(httr)
```

```{r}
#| message: false
#| warning: false
url <- "https://github.com/matdknu/intro-r/raw/main/bbdd/eventos_22_24.xlsx"

# Crear un archivo temporal
temp_file <- tempfile(fileext = ".xlsx")

# Descargar el archivo desde GitHub
GET(url, write_disk(temp_file, overwrite = TRUE))

# Leer el archivo Excel en R
eventos <- read_excel(temp_file)
```

Volvemos a renombrar para trabajar similar a la Clase 2.

```{r}
eventos <- eventos %>%
  rename(
    motivo = "MOTIVO",
    tipo = "TIPO",
    region = "REGION",
    n_asistentes = "CANTIDAD ASISTENTES",
    fecha_inicio = "FECHA INICIO",
    hora_inicio = "HORA INICIO",
    fecha_termino = "FECHA TERMINO",
    hora_termino = "HORA TERMINO"
  )
```

# Resumen de datos agrupados. 

En R, un "resumen de datos agrupados" se refiere a una técnica para calcular estadísticas descriptivas de un conjunto de datos que ha sido agrupado en categorías o grupos. Esto es útil cuando quieres obtener información agregada o resumida sobre diferentes subgrupos dentro de tu dataset.

Para realizar un resumen de datos agrupados en R, puedes usar funciones como `aggregate()`, `dplyr::group_by()` junto con `dplyr::summarize()` o `dplyr::summarise()`,

**Funciones totales**

```{r}
#| eval: false 

result <- data_frame |> 
  group_by(group_column) |> 
  summarize(
    total_sum = sum(n, na.rm = TRUE),
    mean_value = mean(n, na.rm = TRUE),
    median_value = median(n, na.rm = TRUE),
    variance = var(n, na.rm = TRUE),
    sd_value = sd(n, na.rm = TRUE),
    max_value = max(n, na.rm = TRUE),
    min_value = min(n, na.rm = TRUE),
    count = n(),
    unique_count = n_distinct(n)
  )
```

```{r}
eventos %>% 
  summarise(mean_ytotcor_region = mean(n_asistentes, na.rm = T))
```

```{r}
eventos %>% 
  summarise(mean_ytotcor_region = mean(n_asistentes, na.rm = T))
```

Sin decimales.

```{r}
eventos %>% 
  summarise(mean_eventos = round(mean(n_asistentes, na.rm = TRUE)))

```

```{r}
eventos |> group_by(region) |> 
  summarise(mean_eventos_region = round(mean(n_asistentes, na.rm = TRUE)))
```

## Probando otra base de datos institucional

```{r}
#| message: false
#| warning: false
postulantes_anio <- read_excel("/Users/matdknu/Dropbox/OLES/intro-r/bbdd/postulantes_anio.xlsx")

```

Recodificación. A veces sale más fácil recodificar con el R base.

```{r}
colnames(postulantes_anio)[1] <- "anio_postulacion"
colnames(postulantes_anio)[2] <- "genero"
colnames(postulantes_anio)[3] <- "fecha_nac"
colnames(postulantes_anio)[4] <- "edad"
colnames(postulantes_anio)[5] <- "comuna"
colnames(postulantes_anio)[6] <- "region"
```

Ahora, no existe una cantidad postulantes por año, por lo que es importante crea una variable que tenga algún número que permita la manipulación de datos continuos. Las dos formas de realizarlo.

```{r}
postulantes_anio$n <- 1
postulantes_anio |> mutate(n = 1)
```

Una forma de hacer un conteo, considerando la creación de la variable creada, son dos:

```{r}
conteo <- postulantes_anio %>% count(anio_postulacion); conteo
```

Sin embargo, también existe la oportunidad de sumar los N.

```{r}
# Verificar el tipo de datos de la columna n
str(postulantes_anio)

# Convertir la columna n a numérico si es necesario
postulantes_anio <- postulantes_anio |> 
  mutate(n = as.numeric(n))

# Realizar la agrupación y suma
conteo2 <- postulantes_anio |> 
  group_by(anio_postulacion) |> 
  summarize(total_n = sum(n, na.rm = TRUE)); conteo2
```

De igual forma, podemos añadir una nueva variable para contrastar.

```{r}
conteo3 <- postulantes_anio |> 
  group_by(anio_postulacion, genero) |> 
  summarize(total_n = sum(n, na.rm = TRUE)); conteo3
```

Y seguir....

```{r}
conteo4 <- postulantes_anio |> 
  group_by(anio_postulacion, genero, comuna) |> 
  summarize(total_n = sum(n, na.rm = TRUE)); conteo4
```

## ¿Ahora? Visualización de datos

Ggplot2 es uno de los paquetes para una correcta visualización de datos. La creatividad y correcta visualización corresponde a cuáles son los objetivos comunicativos.

Además, existe una serie de páginas web que poseen galerías con ejemplos ilustrativos. Dentro de ellos:

1.  [R Graph Gallery](https://r-graph-gallery.com/ggplot2-package.html)
2.  [30 gráficos de Ggplot2](https://epirhandbook.com/new_pages/ggplot_basics.html)
3.  [Libro de Ggplot2](https://www.kyle-w-brown.com/R-Gallery/flow.html#edge-bundling)
4.  Entre otros...

Veamos un gráfico de líneas.

```{r}
#| message: false
#| warning: false

ggplot(conteo2, aes(x = anio_postulacion, y = total_n)) +
  geom_line() +
  geom_point() +
  labs(title = "Postulantes a carabineros según año",
       x = "Año de postulación",
       y = "Total de postulaciones") +
  theme_minimal()
```

Un gráfico de barras.

```{r}
#| message: false
#| warning: false

 ggplot(conteo2, aes(x = anio_postulacion, y = total_n)) +
  geom_bar(stat = "identity") + # Usar stat="identity" para barras con valores de y explícitos
  labs(title = "Postulantes a carabineros según año",
       x = "Año de postulación",
       y = "Total de postulaciones") 
```

```{r}
ggplot(conteo2, aes(x = anio_postulacion, y = total_n, 
                    fill = as.factor(anio_postulacion))) +
  geom_bar(stat = "identity") + # Usar stat="identity" para barras con valores de y explícitos
  labs(title = "Postulantes a carabineros según año",
       x = "Año de postulación",
       y = "Total de postulaciones") +
  theme_minimal()

```

```{r}
g2 <- ggplot(postulantes_anio, aes(x = edad)) +
  geom_density(fill = "steelblue", alpha = 0.7, bw = 2) +  # Ajustar el bandwidth con bw a un valor mayor para suavizar las curvas
  facet_grid(~ anio_postulacion) +
  labs(title = "Densidad de Edad por Año",
       x = "Edad",
       y = "Densidad") 
g2
```

Un poco más bonito!!

```{r}
ggplot(postulantes_anio, aes(x = edad)) +
  geom_density(fill = "steelblue", alpha = 0.7, bw = 2) +  # Ajustar el bandwidth con bw a un valor mayor para suavizar las curvas
  facet_grid(~ anio_postulacion) +
  labs(title = "Densidad de Edad por Año",
       x = "Edad",
       y = "Densidad") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5),
    strip.text.x = element_text(size = 12, face = "bold"),  # Mejorar el estilo del texto del facet
    axis.title = element_text(size = 12, face = "bold"),    # Mejorar el estilo de los títulos de los ejes
    axis.text = element_text(size = 10),                    # Mejorar el estilo del texto de los ejes
    panel.grid.major = element_line(size = 0.5),            # Ajustar el tamaño de las líneas de la cuadrícula
    panel.grid.minor = element_blank()                      # Eliminar las líneas menores de la cuadrícula
  )
```
